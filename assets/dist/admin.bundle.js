/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./front/js/Admin.js":
/*!***************************!*\
  !*** ./front/js/Admin.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_Admin_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/Admin.scss */ \"./front/scss/Admin.scss\");\n/* harmony import */ var _utils_Kom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Kom */ \"./front/js/utils/Kom.js\");\n/* harmony import */ var _utils_Events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Events */ \"./front/js/utils/Events.js\");\n/* harmony import */ var _modal_ModalFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modal/ModalFactory */ \"./front/js/modal/ModalFactory.js\");\n\n\n\n\nvar kom = new _utils_Kom__WEBPACK_IMPORTED_MODULE_1__.default();\nwindow.kom = kom;\nvar events = new _utils_Events__WEBPACK_IMPORTED_MODULE_2__.default();\nwindow.events = events;\nvar lockRegistration = document.querySelector('#lock-registration');\nvar maxDepth = document.querySelector('#max-depth');\nvar usersList = document.querySelector('#users-list');\n\nif (lockRegistration && maxDepth && usersList) {\n  (function () {\n    var dom = {\n      error: document.querySelector('#error-output'),\n      loading: document.querySelector('#line-loader')\n    };\n\n    var _loop = function _loop(i) {\n      var roles = usersList.children[i].querySelector('.user-roles');\n\n      var _loop2 = function _loop2(j) {\n        var revokeRoleInput = roles.children[j].lastElementChild;\n        revokeRoleInput.addEventListener('change', function () {\n          var processResponse = function processResponse(res) {\n            dom.loading.style.opacity = '0';\n\n            if (res.status === 200) {\n              window.location = '/admin/users';\n            }\n          };\n\n          var parameters = {\n            checked: revokeRoleInput.checked,\n            roleId: revokeRoleInput.dataset.id,\n            userId: usersList.children[i].dataset.id\n          };\n          dom.loading.style.opacity = '1';\n          kom.post('/api/user/update/role', parameters).then(processResponse)[\"catch\"](processResponse);\n        });\n      };\n\n      for (var j = 0; j < roles.children.length; ++j) {\n        _loop2(j);\n      }\n\n      var deleteButton = usersList.children[i].querySelector('.delete-user');\n      deleteButton.addEventListener('click', function () {\n        var processResponse = function processResponse(res) {\n          dom.loading.style.opacity = '0';\n\n          if (res.status === 200) {\n            window.location = '/admin/users';\n          } else if (res.code === 'B_NEVER_KILL_ROOT') {\n            dom.error.innerHTML = res.message;\n          }\n        };\n\n        new _modal_ModalFactory__WEBPACK_IMPORTED_MODULE_3__.default('DeleteAccount', {\n          url: '/template/modal/delete/user',\n          cb: function cb() {\n            var parameters = {\n              userId: usersList.children[i].dataset.id\n            };\n            dom.loading.style.opacity = '1';\n            kom.post('/api/user/delete', parameters).then(processResponse)[\"catch\"](processResponse);\n          }\n        });\n      });\n    };\n\n    for (var i = 0; i < usersList.children.length; ++i) {\n      _loop(i);\n    }\n\n    lockRegistration.addEventListener('change', function () {\n      var processResponse = function processResponse(res) {\n        dom.loading.style.opacity = '0';\n\n        if (res.status === 200) {\n          window.location = '/admin/users';\n        }\n      };\n\n      var parameters = {\n        lockRegistration: lockRegistration.checked\n      };\n      dom.loading.style.opacity = '1';\n      kom.post('/api/admin/update/settings', parameters).then(processResponse)[\"catch\"](processResponse);\n    });\n    maxDepth.addEventListener('click', function () {\n      var processResponse = function processResponse(res) {\n        dom.loading.style.opacity = '0';\n\n        if (res.status === 200) {\n          window.location = '/admin/users';\n        }\n      };\n\n      var parameters = {\n        maxDepth: maxDepth.value\n      };\n      dom.loading.style.opacity = '1';\n      kom.post('/api/admin/update/settings', parameters).then(processResponse)[\"catch\"](processResponse);\n    });\n  })();\n}\n\n//# sourceURL=webpack://BlogMaker/./front/js/Admin.js?");

/***/ }),

/***/ "./front/js/modal/ModalBase.js":
/*!*************************************!*\
  !*** ./front/js/modal/ModalBase.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ModalBase = /*#__PURE__*/function () {\n  function ModalBase(options) {\n    _classCallCheck(this, ModalBase);\n\n    this._url = options.url;\n    this._modalOverlay = null;\n    this._overlayClickedEvtId = -1;\n    this._closeButtons = null;\n    this._closeClickedEvtIds = []; // Modal building sequence:\n    // - get HTML template from server;\n    // - parse template response to become DOM object;\n    // - append DOM element to global overlay;\n    // - open modal by adding overlay to the body;\n    // - let child class fill attributes and register its events.\n\n    this._loadTemplate();\n  }\n\n  _createClass(ModalBase, [{\n    key: \"destroy\",\n    value: function destroy() {\n      // Must be overridden in child class to clean extension properties and events\n      window.events.removeEvent(this._overlayClickedEvtId); // Might do nothing, as event is removed in close method\n\n      for (var i = 0; i < this._closeButtons.length; ++i) {\n        window.events.removeEvent(this._closeClickedEvtIds[i]);\n      } // Same for this event\n\n\n      delete this._url;\n      delete this._modalOverlay;\n      delete this._overlayClickedEvtId;\n      delete this._closeButtons;\n      delete this._closeClickedEvtIds;\n    }\n  }, {\n    key: \"_loadTemplate\",\n    value: function _loadTemplate() {\n      var _this = this;\n\n      window.kom.getText(this._url).then(function (response) {\n        _this._modalOverlay = _this.parseHTMLFragment(response); // Get close button from template\n\n        _this._closeButtons = _this._modalOverlay.querySelectorAll('.modal-close');\n\n        _this.open();\n\n        _this._fillAttributes();\n      })[\"catch\"](function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"_fillAttributes\",\n    value: function _fillAttributes() {// Must be overridden in child class to build modal with HTML template attributes\n    }\n  }, {\n    key: \"parseHTMLFragment\",\n    value: function parseHTMLFragment(htmlString) {\n      var parser = new DOMParser();\n      var dom = parser.parseFromString(htmlString, 'text/html');\n      return dom.body.firstChild;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      document.body.appendChild(this._modalOverlay);\n      this._overlayClickedEvtId = window.events.addEvent('click', this._modalOverlay, this.close, this);\n\n      for (var i = 0; i < this._closeButtons.length; ++i) {\n        this._closeClickedEvtIds.push(window.events.addEvent('click', this._closeButtons[i], this.close, this));\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(event) {\n      // Must be overridden in child class to properly clean extension properties and events\n      for (var i = 0; i < this._closeButtons.length; ++i) {\n        if (!event || event && (event.target === this._modalOverlay || event.target === this._closeButtons[i])) {\n          // Remove the overlay from the body\n          document.body.removeChild(this._modalOverlay); // Use the child class destroy\n\n          this.destroy();\n          return;\n        }\n      }\n    }\n  }]);\n\n  return ModalBase;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalBase);\n\n//# sourceURL=webpack://BlogMaker/./front/js/modal/ModalBase.js?");

/***/ }),

/***/ "./front/js/modal/ModalFactory.js":
/*!****************************************!*\
  !*** ./front/js/modal/ModalFactory.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _controller_DeleteAccountModal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller/DeleteAccountModal.js */ \"./front/js/modal/controller/DeleteAccountModal.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\nvar Classes = {\n  DeleteAccountModal: _controller_DeleteAccountModal_js__WEBPACK_IMPORTED_MODULE_0__.default\n};\n\nvar ModalFactory = function ModalFactory(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, ModalFactory);\n\n  return new Classes[\"\".concat(name, \"Modal\")](options);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalFactory);\n\n//# sourceURL=webpack://BlogMaker/./front/js/modal/ModalFactory.js?");

/***/ }),

/***/ "./front/js/modal/controller/DeleteAccountModal.js":
/*!*********************************************************!*\
  !*** ./front/js/modal/controller/DeleteAccountModal.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ModalBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ModalBase.js */ \"./front/js/modal/ModalBase.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar DeleteAccountModal = /*#__PURE__*/function (_ModalBase) {\n  _inherits(DeleteAccountModal, _ModalBase);\n\n  var _super = _createSuper(DeleteAccountModal);\n\n  function DeleteAccountModal(options) {\n    var _this;\n\n    _classCallCheck(this, DeleteAccountModal);\n\n    _this = _super.call(this, options);\n    _this._cb = options.cb;\n    _this._deleteButton = null;\n    _this._deleteEvtId = -1;\n    return _this;\n  }\n\n  _createClass(DeleteAccountModal, [{\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(DeleteAccountModal.prototype), \"destroy\", this).call(this);\n\n      window.events.removeEvent(this._deleteEvtId);\n    }\n  }, {\n    key: \"_fillAttributes\",\n    value: function _fillAttributes() {\n      this._deleteButton = this._modalOverlay.querySelector('#modal-user-delete-button');\n\n      this._events();\n    }\n  }, {\n    key: \"_events\",\n    value: function _events() {\n      this._deleteEvtId = window.events.addEvent('click', this._deleteButton, this._deleteClicked, this);\n    }\n  }, {\n    key: \"_deleteClicked\",\n    value: function _deleteClicked(event) {\n      // Avoid form submit default behavior\n      event.preventDefault(); // Calling the modal url in post allow its resolution\n\n      this.close();\n\n      this._cb();\n    }\n  }]);\n\n  return DeleteAccountModal;\n}(_ModalBase_js__WEBPACK_IMPORTED_MODULE_0__.default);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeleteAccountModal);\n\n//# sourceURL=webpack://BlogMaker/./front/js/modal/controller/DeleteAccountModal.js?");

/***/ }),

/***/ "./front/js/utils/Events.js":
/*!**********************************!*\
  !*** ./front/js/utils/Events.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Events = /*#__PURE__*/function () {\n  function Events() {\n    var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, Events);\n\n    // Prevent wrong type for debug\n    if (typeof debug !== 'boolean') {\n      debug = false;\n    }\n\n    this._debug = debug;\n    this._idIncrementor = Math.floor(Math.random() * Math.floor(256)) * 5678;\n    this._regularEvents = [];\n    this._customEvents = {};\n    this.version = '1.2.1';\n  }\n\n  _createClass(Events, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      // Debug logging\n      this._raise('log', 'CustomEvents.destroy'); // Remove all existing eventListener\n\n\n      this.removeAllEvents(); // Delete object attributes\n\n      Object.keys(this).forEach(function (key) {\n        delete _this[key];\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  --------------------------------------  CLASSIC JS EVENTS OVERRIDE  ------------------------------------------  */\n\n    /*                                                                                                                  */\n\n    /*  The following methods are made to abstract the event listeners from the JavaScript layer, so you can easily     */\n\n    /*  remove them when done using, without bothering with binding usual business for them. 'addEvent/removeEvent'     */\n\n    /*  method replace the initial ones. 'removeAllEvents' clears all instance event listeners ; nice for destroy       */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(eventName, element, callback) {\n      var _this2 = this;\n\n      var scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.addEvent: \".concat(eventName, \" \").concat(element, \" \").concat(callback, \" \").concat(scope, \" \").concat(options)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined || element === null || element === undefined || callback === null || callback === undefined) {\n        this._raise('error', 'CustomEvents.addEvent: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      var err = function err() {\n        _this2._raise('error', 'CustomEvents.addEvent: Wrong type for argument');\n      }; // Test argument validity for further process\n\n\n      if (typeof eventName !== 'string' || _typeof(element) !== 'object' || typeof callback !== 'function') {\n        err();\n        return false;\n      }\n\n      if (scope !== null && scope !== undefined && _typeof(scope) !== 'object') {\n        err();\n        return false;\n      }\n\n      if (options !== null && options !== undefined && _typeof(options) !== 'object' && typeof options !== 'boolean') {\n        err();\n        return false;\n      } // Save scope to callback function, default scope is DOM target object\n\n\n      callback = callback.bind(scope); // Add event to internal array and keep all its data\n\n      this._regularEvents.push({\n        id: this._idIncrementor,\n        element: element,\n        eventName: eventName,\n        scope: scope,\n        callback: callback,\n        options: options\n      }); // Add event listener with options\n\n\n      element.addEventListener(eventName, callback, options); // Post increment to return the true event entry id, then update the incrementer\n\n      return this._idIncrementor++;\n    }\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent(eventId) {\n      // Debug logging\n      this._raise('log', \"Events.removeEvent: \".concat(eventId)); // Missing mandatory arguments\n\n\n      if (eventId === null || eventId === undefined) {\n        this._raise('error', 'CustomEvents.removeEvent: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof eventId !== 'number') {\n        this._raise('error', 'CustomEvents.removeEvent: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Iterate over saved listeners, reverse order for proper splicing\n\n      for (var i = this._regularEvents.length - 1; i >= 0; --i) {\n        // If an event ID match in saved ones, we remove it and update saved listeners\n        if (this._regularEvents[i].id === eventId) {\n          // Update status code\n          statusCode = true; // Found and removed event listener status code (true)\n\n          this._clearRegularEvent(i);\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n  }, {\n    key: \"removeAllEvents\",\n    value: function removeAllEvents() {\n      // Debug logging\n      this._raise('log', 'CustomEvents.removeAllEvents'); // Returned value\n\n\n      var statusCode = false; // Didn't removed any status code by default (false)\n      // Flag to know if there was any previously stored event listeners\n\n      var hadEvents = this._regularEvents.length > 0; // Iterate over saved listeners, reverse order for proper splicing\n\n      for (var i = this._regularEvents.length - 1; i >= 0; --i) {\n        this._clearRegularEvent(i);\n      } // If all events where removed, update statusCode to success\n\n\n      if (this._regularEvents.length === 0 && hadEvents) {\n        // Update status code\n        statusCode = true; // Found and removed all events listener status code (true)\n      } // Return with status code\n\n\n      return statusCode;\n    }\n  }, {\n    key: \"_clearRegularEvent\",\n    value: function _clearRegularEvent(index) {\n      // Debug logging\n      this._raise('log', \"CustomEvents._clearRegularEvent: \".concat(index)); // Missing mandatory arguments\n\n\n      if (index === null || index === undefined) {\n        this._raise('error', 'CustomEvents._clearRegularEvent: Missing mandatory argument');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof index !== 'number') {\n        this._raise('error', 'CustomEvents._clearRegularEvent: Wrong type for argument');\n\n        return false;\n      } // Check if index match an existing event in attributes\n\n\n      if (this._regularEvents[index]) {\n        // Remove its event listener and update regularEvents array\n        var evt = this._regularEvents[index];\n        evt.element.removeEventListener(evt.eventName, evt.callback, evt.options);\n\n        this._regularEvents.splice(index, 1);\n\n        return true;\n      }\n\n      return false;\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  -------------------------------------------  CUSTOM JS EVENTS  -----------------------------------------------  */\n\n    /*                                                                                                                  */\n\n    /*  The three following methods (subscribe, unsubscribe, publish) are designed to reference an event by its name    */\n\n    /*  and handle as many subscriptions as you want. When subscribing, you get an ID you can use to unsubscribe your   */\n\n    /*  event later. Just publish with the event name to callback all its registered subscriptions.                     */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(eventName, callback) {\n      var _this3 = this;\n\n      var oneShot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.subscribe: \".concat(eventName, \" \").concat(callback, \" \").concat(oneShot)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined || callback === null || callback === undefined) {\n        this._raise('error', 'CustomEvents.subscribe', 'Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      var err = function err() {\n        _this3._raise('error', 'CustomEvents.subscribe: Wrong type for argument');\n      };\n\n      if (typeof eventName !== 'string' || typeof callback !== 'function') {\n        err();\n        return false;\n      }\n\n      if (oneShot !== null && oneShot !== undefined && typeof oneShot !== 'boolean') {\n        err();\n        return false;\n      } // Create event entry if not already existing in the registered events\n\n\n      if (!this._customEvents[eventName]) {\n        this._customEvents[eventName] = []; // Set empty array for new event subscriptions\n      } // Push new subscription for event name\n\n\n      this._customEvents[eventName].push({\n        id: this._idIncrementor,\n        name: eventName,\n        os: oneShot,\n        callback: callback\n      }); // Post increment to return the true event entry id, then update the incrementer\n\n\n      return this._idIncrementor++;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(eventId) {\n      // Debug logging\n      this._raise('log', \"CustomEvents.unsubscribe: \".concat(eventId)); // Missing mandatory arguments\n\n\n      if (eventId === null || eventId === undefined) {\n        this._raise('error', 'CustomEvents.unsubscribe: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof eventId !== 'number') {\n        this._raise('error', 'CustomEvents.unsubscribe: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Reverse events iteration to properly splice without messing with iteration order\n\n      for (var i = keys.length - 1; i >= 0; --i) {\n        // Get event subscriptions\n        var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id\n\n        for (var j = 0; j < subs.length; ++j) {\n          // In case we got a subscription for this events\n          if (subs[j].id === eventId) {\n            // Debug logging\n            this._raise('log', \"CustomEvents.unsubscribe: subscription found\\n\", subs[j], \"\\nSubscription n\\xB0\".concat(eventId, \" for \").concat(subs.name, \" has been removed\")); // Update status code\n\n\n            statusCode = true; // Found and unsubscribed status code (true)\n            // Remove subscription from event Array\n\n            subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n            if (subs.length === 0) {\n              delete this._customEvents[keys[i]];\n            } // Break since id are unique and no other subscription can be found after\n\n\n            break;\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n  }, {\n    key: \"unsubscribeAllFor\",\n    value: function unsubscribeAllFor(eventName) {\n      // Debug logging\n      this._raise('log', \"CustomEvents.unsubscribeAllFor: \".concat(eventName)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined) {\n        this._raise('error', 'CustomEvents.unsubscribeAllFor: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      if (typeof eventName !== 'string') {\n        this._raise('error', 'CustomEvents.unsubscribeAllFor: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Iterate through custom event keys to find matching event to remove\n\n      for (var i = 0; i < keys.length; ++i) {\n        if (keys[i] === eventName) {\n          // Get event subscriptions\n          var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id, reverse iteration to properly splice without messing with iteration order\n\n          for (var j = subs.length - 1; j >= 0; --j) {\n            // Update status code\n            statusCode = true; // Found and unsubscribed all status code (true)\n            // Remove subscription from event Array\n\n            subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n            if (subs.length === 0) {\n              delete this._customEvents[keys[i]];\n            }\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(eventName) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.publish: \".concat(eventName, \" \").concat(data)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined) {\n        this._raise('error', 'CustomEvents.publish: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      if (typeof eventName !== 'string' || data !== undefined && _typeof(data) !== 'object') {\n        this._raise('error', 'CustomEvents.publish: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Iterate over saved custom events\n\n      for (var i = 0; i < keys.length; ++i) {\n        // If published name match an existing events, we iterate its subscriptions. First subscribed, first served\n        if (keys[i] === eventName) {\n          // Update status code\n          statusCode = true; // Found and published status code (true)\n          // Get event subscriptions\n\n          var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id\n          // Reverse subscriptions iteration to properly splice without messing with iteration order\n\n          for (var j = subs.length - 1; j >= 0; --j) {\n            // Debug logging\n            this._raise('log', \"CustomEvents.publish: fire callback for \".concat(eventName, \", subscription n\\xB0\").concat(subs[j].id), subs[j]); // Fire saved callback\n\n\n            subs[j].callback(data); // Remove oneShot listener from event entry\n\n            if (subs[j].os) {\n              // Debug logging\n              this._raise('log', 'CustomEvents.publish: remove subscription because one shot usage is done');\n\n              subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n              if (subs.length === 0) {\n                delete this._customEvents[keys[i]];\n              }\n            }\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  --------------------------------------------  COMPONENT UTILS  -----------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n  }, {\n    key: \"_raise\",\n    value: function _raise(level, errorValue) {\n      if (this._debug) {\n        console[level](errorValue);\n      }\n    }\n  }]);\n\n  return Events;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);\n\n//# sourceURL=webpack://BlogMaker/./front/js/utils/Events.js?");

/***/ }),

/***/ "./front/js/utils/Kom.js":
/*!*******************************!*\
  !*** ./front/js/utils/Kom.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/enum/HttpStatusCode.js */ \"./front/js/utils/enum/HttpStatusCode.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Kom = /*#__PURE__*/function () {\n  function Kom(jwtToken) {\n    _classCallCheck(this, Kom);\n\n    this._jwtToken = jwtToken || null;\n    this._headers = this._createRequestHeaders();\n  }\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /*  -------------------------------------------  CLASS INIT UTILS  -----------------------------------------------  */\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /** @method\r\n   * @name _createRequestHeaders\r\n   * @private\r\n   * @memberof Kom\r\n   * @description <blockquote>Fills Kom <code>_headers</code> private member array, to use in HTTP requests later on.\r\n   * This method is required to be called on construction.</blockquote>\r\n   * @return {array[]} - The headers array, length 3, to be used in HTTP requests */\n\n\n  _createClass(Kom, [{\n    key: \"_createRequestHeaders\",\n    value: function _createRequestHeaders() {\n      return [['Content-Type', 'application/json; charset=UTF-8'], ['Accept', 'application/json'], ['X-XSRF-TOKEN', this._jwtToken]];\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  -------------------------------------------  PRIVATE METHODS  ------------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _getErrorCodeFromHTTPStatus\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>This method is called whenever a server request didn't went well. In case a request (from\r\n     * any type) fails, its HTTP status code have to be handle in the method, so it returns an error code can be handled\r\n     * in the user interface (with notification, console or else).</blockquote>\r\n     * @param {number} code - The HTTP status code to handle, in supported ones from HttpStatusCode enumeration\r\n     * @return {string} The HTTP status as an error code */\n\n  }, {\n    key: \"_getErrorCodeFromHTTPStatus\",\n    value: function _getErrorCodeFromHTTPStatus(code) {\n      if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.NOT_FOUND) {\n        return 'B_KOM_NOT_FOUND';\n      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.FORBIDDEN) {\n        return 'B_KOM_ACCESS_FORBIDDEN';\n      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.INTERNAL_ERROR) {\n        return 'B_KOM_INTERNAL_ERROR';\n      } else {\n        return \"B_KOM_UNKNOWN_ERROR\";\n      }\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAs\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Generic tool method used by private methods on fetch responses to format output in the provided\r\n     * format. It must be either `json`, `text` or `raw`.</blockquote>\r\n     * @param {String} type - The type of resolution, can be `json`, `text` or `raw`\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAs\",\n    value: function _resolveAs(type, response) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (response) {\n          if (type === 'raw') {\n            // Raw are made in XMLHttpRequest and need special handling\n            if (response.status === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.OK) {\n              resolve(response.responseText);\n            } else {\n              reject(_this._getErrorCodeFromHTTPStatus(response.status));\n            }\n          } else if (type === 'json' || type === 'text') {\n            // Call are made using fetch API\n            if (response[type]) {\n              resolve(response[type]());\n            } else {\n              // Fallback on standard error handling\n              reject(_this._getErrorCodeFromHTTPStatus(response.status));\n            }\n          } else {\n            // Resolution type doesn't exists\n            reject('F_KOM_UNSUPPORTED_TYPE');\n          }\n        } else {\n          reject('F_KOM_MISSING_ARGUMENT');\n        }\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsJSON\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as JSON to be\r\n     * read in JavaScript code as objects.</blockquote>\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAsJSON\",\n    value: function _resolveAsJSON(response) {\n      return this._resolveAs('json', response);\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsText\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as text to be\r\n     * read in JavaScript code as string (mostly to parse HTML templates).</blockquote>\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as a string on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAsText\",\n    value: function _resolveAsText(response) {\n      return this._resolveAs('text', response);\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsRaw\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by XmlHTTPRequests to format server response as raw binary data.</blockquote>\r\n     * @param {Object} response - The <code>XmlHTTPRequest</code> response status object\r\n     * @returns {Promise} The request <code>Promise</code>, doesn't format response on resolve, send error code string on reject */\n\n  }, {\n    key: \"_resolveAsRaw\",\n    value: function _resolveAsRaw(response) {\n      return this._resolveAs('raw', response);\n    }\n  }, {\n    key: \"_xhrCall\",\n    value: function _xhrCall(url, verb, data) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(verb, url, true);\n        xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n        xhr.onreadystatechange = function (response) {\n          if (response.target.readyState === 4) {\n            // Ready state changed has reach the response state\n            _this2._resolveAsRaw(response.target).then(resolve)[\"catch\"](reject);\n          }\n        };\n\n        xhr.onerror = function () {\n          reject({\n            code: 'F_KOM_XHR_ERROR'\n          });\n        };\n\n        xhr.send(data);\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ---------------------------------------  HTTP SERVER CALLS METHODS  ------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @async\r\n     * @name get\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the\r\n     * response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.\r\n     * It is meant to perform API call to access database through the user interface.</blockquote>\r\n     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var _this3 = this;\n\n      var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._resolveAsJSON.bind(this);\n      return new Promise(function (resolve, reject) {\n        var options = {\n          method: 'GET',\n          headers: new Headers([_this3._headers[0]]) // Content type to JSON\n\n        };\n        fetch(url, options).then(resolution).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name getText\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the\r\n     * response as a <code>String</code>.<br><code>reject</code> returns an error key as a <code>String</code>. It is\r\n     * meant to perform API call to get HTML templates as string to be parsed as documents/documents fragments.</blockquote>\r\n     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"getText\",\n    value: function getText(url) {\n      return this.get(url, this._resolveAsText.bind(this));\n    }\n    /** @method\r\n     * @async\r\n     * @name getRaw\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using an <code>XMLHttpRequest</code>, with an override\r\n     * mime type hack to pass bytes through unprocessed.<br><code>resolve</code> returns the response as raw binary data.<br><code>reject</code>\r\n     * returns an error code as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The url to fetch raw data from\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"getRaw\",\n    value: function getRaw(url) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4._xhrCall(url, 'GET', null).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name post\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>\r\n     * returns the response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The <code>POST</code> url to fetch data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"post\",\n    value: function post(url, data) {\n      var _this5 = this;\n\n      var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._resolveAsJSON.bind(this);\n      return new Promise(function (resolve, reject) {\n        var options = {\n          method: 'POST',\n          headers: new Headers(_this5._headers),\n          // POST needs all previously defined headers\n          body: JSON.stringify(data)\n        };\n        fetch(url, options).then(resolution).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name postText\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>\r\n     * returns the response as a <code>String</code>.<br><code>reject</code> returns an error key as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The <code>POST</code> url to fetch data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"postText\",\n    value: function postText(url, data) {\n      return this.post(url, data, this._resolveAsText.bind(this));\n    }\n    /** @method\r\n     * @async\r\n     * @name postRaw\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>, with an override\r\n     * mime type hack to pass bytes through unprocessed.<br><code>resolve</code> returns the response as raw binary data.<br><code>reject</code>\r\n     * returns an error code as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The url to fetch raw data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"postRaw\",\n    value: function postRaw(url, data) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this6._xhrCall(url, 'POST', JSON.stringify(data)).then(resolve)[\"catch\"](reject);\n      });\n    }\n  }, {\n    key: \"postForm\",\n    value: function postForm(url, data) {\n      return new Promise(function (resolve, reject) {\n        // Create virtual form\n        var form = document.createElement('FORM');\n        form.method = 'POST';\n        form.action = url; // Declare its virtual fields from sent data\n\n        for (var key in data) {\n          if (Object.prototype.hasOwnProperty.call(data, key)) {\n            var hiddenField = document.createElement('INPUT');\n            hiddenField.type = 'hidden';\n            hiddenField.name = key;\n            hiddenField.value = data[key];\n            form.appendChild(hiddenField);\n          }\n        } // Build XHR with xsrf token\n\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', url); //xhr.setRequestHeader('X-XSRF-TOKEN', this._csrfToken);\n        // Register the state change event\n\n        xhr.onreadystatechange = function (response) {\n          if (response.target.readyState === 4) {\n            // Ready state changed has reach the response state\n            // As specified with backend, response is JSON if success, HTML otherwise\n            try {\n              // If we can parse as a JSON, everything went fine server side\n              var output = JSON.parse(response.target.response);\n              resolve(output);\n            } catch (err) {\n              // Otherwise, the server returns the template with its errors\n              reject(response.target.response);\n            }\n          }\n        }; // XHR error handling\n\n\n        xhr.onerror = function () {\n          reject('F_KOM_XHR_ERROR');\n        }; // Create form data and send it through the XHR\n\n\n        var formData = new FormData(form);\n        xhr.send(formData);\n      });\n    }\n  }, {\n    key: \"xhr\",\n    value: function xhr(verb, url, data) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(verb, url, true);\n\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            resolve(JSON.parse(xhr.responseText));\n          }\n        }; // XHR error handling\n\n\n        xhr.onerror = function () {\n          reject({\n            code: 'F_KOM_XHR_ERROR'\n          });\n        };\n\n        xhr.send(data);\n      });\n    }\n  }, {\n    key: \"jwtToken\",\n    get: function get() {\n      return this._jwtToken;\n    },\n    set: function set(token) {\n      this._jwtToken = token;\n    }\n  }]);\n\n  return Kom;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Kom);\n\n//# sourceURL=webpack://BlogMaker/./front/js/utils/Kom.js?");

/***/ }),

/***/ "./front/js/utils/enum/HttpStatusCode.js":
/*!***********************************************!*\
  !*** ./front/js/utils/enum/HttpStatusCode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.freeze({\n  OK: 200,\n  NOT_FOUND: 404,\n  FORBIDDEN: 403,\n  INTERNAL_ERROR: 500\n}));\n\n//# sourceURL=webpack://BlogMaker/./front/js/utils/enum/HttpStatusCode.js?");

/***/ }),

/***/ "./front/scss/Admin.scss":
/*!*******************************!*\
  !*** ./front/scss/Admin.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://BlogMaker/./front/scss/Admin.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./front/js/Admin.js");
/******/ 	window.BlogMaker = __webpack_exports__.default;
/******/ 	
/******/ })()
;
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./front/js/Auth.js":
/*!**************************!*\
  !*** ./front/js/Auth.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_Auth_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/Auth.scss */ \"./front/scss/Auth.scss\");\n/* harmony import */ var _utils_Kom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Kom */ \"./front/js/utils/Kom.js\");\n\n\nvar kom = new _utils_Kom__WEBPACK_IMPORTED_MODULE_1__.default();\n\nvar clearErrorClasses = function clearErrorClasses(obj) {\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    obj[keys[i]].classList.remove('error');\n  }\n};\n\nvar registerSubmit = document.querySelector('#register-submit');\n\nif (registerSubmit) {\n  var dom = {\n    username: document.querySelector('#username'),\n    email: document.querySelector('#email'),\n    code: document.querySelector('#code'),\n    pass1: document.querySelector('#pass1'),\n    pass2: document.querySelector('#pass2'),\n    error: document.querySelector('#error-output'),\n    loading: document.querySelector('#line-loader')\n  }; // Method to react to the server response for a given form\n\n  var processResponse = function processResponse(res) {\n    dom.loading.style.opacity = '0'; // Parse server response to react accordingly\n\n    if (res.status === 200) {\n      window.location.href = res.url;\n    } else {\n      // Handle backend errors\n      dom.error.classList.add('error');\n      dom.error.innerHTML = res.message;\n\n      if (res.code === 'B_INVALID_FIELD') {\n        dom.username.classList.add('error');\n        dom.email.classList.add('error');\n      } else if (res.code === 'B_MISSING_FIELD') {\n        dom.username.classList.add('error');\n        dom.email.classList.add('error');\n      } else if (res.code === 'B_REGISTER_INVALID_FIELD') {\n        dom.username.classList.add('error');\n        dom.email.classList.add('error');\n        dom.code.classList.add('error');\n        dom.pass1.classList.add('error');\n        dom.pass2.classList.add('error');\n      } else if (res.code === 'B_REGISTER_EXISTING_USERNAME_AND_EMAIL') {\n        dom.username.classList.add('error');\n        dom.email.classList.add('error');\n      } else if (res.code === 'B_REGISTER_EXISTING_USERNAME') {\n        dom.username.classList.add('error');\n      } else if (res.code === 'B_REGISTER_EXISTING_EMAIL') {\n        dom.email.classList.add('error');\n      } else if (res.code === 'B_REGISTER_MISSING_FIELD') {\n        if (res.missing.username) {\n          dom.username.classList.add('error');\n        }\n\n        if (res.missing.email) {\n          dom.email.classList.add('error');\n        }\n\n        if (res.missing.code) {\n          dom.code.classList.add('error');\n        }\n\n        if (res.missing.pass1) {\n          dom.pass1.classList.add('error');\n        }\n\n        if (res.missing.pass2) {\n          dom.pass2.classList.add('error');\n        }\n      } else if (res.code === 'B_REGISTER_DIFFERENT_PASSWORDS') {\n        dom.pass1.classList.add('error');\n        dom.pass2.classList.add('error');\n      } else if (res.code === 'B_REGISTER_PASSWORD_TOO_SHORT') {\n        dom.pass1.classList.add('error');\n        dom.pass2.classList.add('error');\n      } else if (res.code === 'B_REGISTER_INVALID_CODE') {\n        dom.code.classList.add('error');\n      }\n    }\n  }; // Register submit event listener\n\n\n  registerSubmit.addEventListener('click', function (event) {\n    event.preventDefault(); // Avoid default form redirection\n\n    var formData = new FormData(document.querySelector('#register-form'));\n    var parameters = Object.fromEntries(formData.entries()); // Remove previous error classes and feedback\n\n    dom.error.innerHTML = '';\n    clearErrorClasses(dom);\n    dom.loading.style.opacity = '1';\n    kom.post('/api/auth/register', parameters).then(processResponse)[\"catch\"](processResponse);\n  });\n}\n\nvar loginSubmit = document.querySelector('#login-submit');\n\nif (loginSubmit) {\n  var _dom = {\n    username: document.querySelector('#username'),\n    password: document.querySelector('#password'),\n    error: document.querySelector('#error-output'),\n    loading: document.querySelector('#line-loader')\n  }; // Method to react to the server response for a given form\n\n  var _processResponse = function _processResponse(res) {\n    _dom.loading.style.opacity = '0'; // Parse server response to react accordingly\n\n    if (res.status === 200) {\n      window.location.href = res.url;\n    } else {\n      // Handle backend errors\n      _dom.error.classList.add('error');\n\n      _dom.error.innerHTML = res.message;\n\n      if (res.code === 'B_LOGIN_INVALID_FIELD') {\n        _dom.username.classList.add('error');\n\n        _dom.password.classList.add('error');\n      } else if (res.code === 'B_LOGIN_MISSING_FIELD') {\n        if (res.missing.username) {\n          _dom.username.classList.add('error');\n        }\n\n        if (res.missing.password) {\n          _dom.password.classList.add('error');\n        }\n      } else if (res.code === 'B_USER_NOT_FOUND') {\n        _dom.username.classList.add('error');\n      } else if (res.code === 'B_LOGIN_INVALID_PASSWORD') {\n        _dom.password.classList.add('error');\n      }\n    }\n  }; // Login submit event listener\n\n\n  loginSubmit.addEventListener('click', function (event) {\n    event.preventDefault(); // Avoid default form redirection\n\n    var formData = new FormData(document.querySelector('#login-form'));\n    var parameters = Object.fromEntries(formData.entries());\n    _dom.loading.style.opacity = '1'; // Remove previous error classes and feedback\n\n    _dom.error.innerHTML = '';\n    clearErrorClasses(_dom);\n    kom.post('/api/auth/login', parameters).then(_processResponse)[\"catch\"](_processResponse);\n  });\n}\n\n//# sourceURL=webpack://BlogMaker/./front/js/Auth.js?");

/***/ }),

/***/ "./front/js/utils/Kom.js":
/*!*******************************!*\
  !*** ./front/js/utils/Kom.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/enum/HttpStatusCode.js */ \"./front/js/utils/enum/HttpStatusCode.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Kom = /*#__PURE__*/function () {\n  function Kom(jwtToken) {\n    _classCallCheck(this, Kom);\n\n    this._jwtToken = jwtToken || null;\n    this._headers = this._createRequestHeaders();\n  }\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /*  -------------------------------------------  CLASS INIT UTILS  -----------------------------------------------  */\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /** @method\r\n   * @name _createRequestHeaders\r\n   * @private\r\n   * @memberof Kom\r\n   * @description <blockquote>Fills Kom <code>_headers</code> private member array, to use in HTTP requests later on.\r\n   * This method is required to be called on construction.</blockquote>\r\n   * @return {array[]} - The headers array, length 3, to be used in HTTP requests */\n\n\n  _createClass(Kom, [{\n    key: \"_createRequestHeaders\",\n    value: function _createRequestHeaders() {\n      return [['Content-Type', 'application/json; charset=UTF-8'], ['Accept', 'application/json'], ['X-XSRF-TOKEN', this._jwtToken]];\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  -------------------------------------------  PRIVATE METHODS  ------------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _getErrorCodeFromHTTPStatus\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>This method is called whenever a server request didn't went well. In case a request (from\r\n     * any type) fails, its HTTP status code have to be handle in the method, so it returns an error code can be handled\r\n     * in the user interface (with notification, console or else).</blockquote>\r\n     * @param {number} code - The HTTP status code to handle, in supported ones from HttpStatusCode enumeration\r\n     * @return {string} The HTTP status as an error code */\n\n  }, {\n    key: \"_getErrorCodeFromHTTPStatus\",\n    value: function _getErrorCodeFromHTTPStatus(code) {\n      if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.NOT_FOUND) {\n        return 'B_KOM_NOT_FOUND';\n      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.FORBIDDEN) {\n        return 'B_KOM_ACCESS_FORBIDDEN';\n      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.INTERNAL_ERROR) {\n        return 'B_KOM_INTERNAL_ERROR';\n      } else {\n        return \"B_KOM_UNKNOWN_ERROR\";\n      }\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAs\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Generic tool method used by private methods on fetch responses to format output in the provided\r\n     * format. It must be either `json`, `text` or `raw`.</blockquote>\r\n     * @param {String} type - The type of resolution, can be `json`, `text` or `raw`\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAs\",\n    value: function _resolveAs(type, response) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (response) {\n          if (type === 'raw') {\n            // Raw are made in XMLHttpRequest and need special handling\n            if (response.status === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__.default.OK) {\n              resolve(response.responseText);\n            } else {\n              reject(_this._getErrorCodeFromHTTPStatus(response.status));\n            }\n          } else if (type === 'json' || type === 'text') {\n            // Call are made using fetch API\n            if (response[type]) {\n              resolve(response[type]());\n            } else {\n              // Fallback on standard error handling\n              reject(_this._getErrorCodeFromHTTPStatus(response.status));\n            }\n          } else {\n            // Resolution type doesn't exists\n            reject('F_KOM_UNSUPPORTED_TYPE');\n          }\n        } else {\n          reject('F_KOM_MISSING_ARGUMENT');\n        }\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsJSON\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as JSON to be\r\n     * read in JavaScript code as objects.</blockquote>\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAsJSON\",\n    value: function _resolveAsJSON(response) {\n      return this._resolveAs('json', response);\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsText\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as text to be\r\n     * read in JavaScript code as string (mostly to parse HTML templates).</blockquote>\r\n     * @param {Object} response - The <code>fetch</code> response object\r\n     * @returns {Promise} The request <code>Promise</code>, format response as a string on resolve, as error code string on reject */\n\n  }, {\n    key: \"_resolveAsText\",\n    value: function _resolveAsText(response) {\n      return this._resolveAs('text', response);\n    }\n    /** @method\r\n     * @async\r\n     * @name _resolveAsRaw\r\n     * @private\r\n     * @memberof Kom\r\n     * @description <blockquote>Tool method used by XmlHTTPRequests to format server response as raw binary data.</blockquote>\r\n     * @param {Object} response - The <code>XmlHTTPRequest</code> response status object\r\n     * @returns {Promise} The request <code>Promise</code>, doesn't format response on resolve, send error code string on reject */\n\n  }, {\n    key: \"_resolveAsRaw\",\n    value: function _resolveAsRaw(response) {\n      return this._resolveAs('raw', response);\n    }\n  }, {\n    key: \"_xhrCall\",\n    value: function _xhrCall(url, verb, data) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(verb, url, true);\n        xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n        xhr.onreadystatechange = function (response) {\n          if (response.target.readyState === 4) {\n            // Ready state changed has reach the response state\n            _this2._resolveAsRaw(response.target).then(resolve)[\"catch\"](reject);\n          }\n        };\n\n        xhr.onerror = function () {\n          reject({\n            code: 'F_KOM_XHR_ERROR'\n          });\n        };\n\n        xhr.send(data);\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ---------------------------------------  HTTP SERVER CALLS METHODS  ------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @async\r\n     * @name get\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the\r\n     * response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.\r\n     * It is meant to perform API call to access database through the user interface.</blockquote>\r\n     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var _this3 = this;\n\n      var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._resolveAsJSON.bind(this);\n      return new Promise(function (resolve, reject) {\n        var options = {\n          method: 'GET',\n          headers: new Headers([_this3._headers[0]]) // Content type to JSON\n\n        };\n        fetch(url, options).then(resolution).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name getText\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the\r\n     * response as a <code>String</code>.<br><code>reject</code> returns an error key as a <code>String</code>. It is\r\n     * meant to perform API call to get HTML templates as string to be parsed as documents/documents fragments.</blockquote>\r\n     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"getText\",\n    value: function getText(url) {\n      return this.get(url, this._resolveAsText.bind(this));\n    }\n    /** @method\r\n     * @async\r\n     * @name getRaw\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>GET</code> HTTP request using an <code>XMLHttpRequest</code>, with an override\r\n     * mime type hack to pass bytes through unprocessed.<br><code>resolve</code> returns the response as raw binary data.<br><code>reject</code>\r\n     * returns an error code as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The url to fetch raw data from\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"getRaw\",\n    value: function getRaw(url) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4._xhrCall(url, 'GET', null).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name post\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>\r\n     * returns the response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The <code>POST</code> url to fetch data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"post\",\n    value: function post(url, data) {\n      var _this5 = this;\n\n      var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._resolveAsJSON.bind(this);\n      return new Promise(function (resolve, reject) {\n        var options = {\n          method: 'POST',\n          headers: new Headers(_this5._headers),\n          // POST needs all previously defined headers\n          body: JSON.stringify(data)\n        };\n        fetch(url, options).then(resolution).then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @async\r\n     * @name postText\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>\r\n     * returns the response as a <code>String</code>.<br><code>reject</code> returns an error key as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The <code>POST</code> url to fetch data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"postText\",\n    value: function postText(url, data) {\n      return this.post(url, data, this._resolveAsText.bind(this));\n    }\n    /** @method\r\n     * @async\r\n     * @name postRaw\r\n     * @public\r\n     * @memberof Kom\r\n     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options\r\n     * object match the url expectations.<br><code>resolve</code>, with an override\r\n     * mime type hack to pass bytes through unprocessed.<br><code>resolve</code> returns the response as raw binary data.<br><code>reject</code>\r\n     * returns an error code as a <code>String</code>.</blockquote>\r\n     * @param {String} url - The url to fetch raw data from\r\n     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters\r\n     * @returns {Promise} The request <code>Promise</code> */\n\n  }, {\n    key: \"postRaw\",\n    value: function postRaw(url, data) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this6._xhrCall(url, 'POST', JSON.stringify(data)).then(resolve)[\"catch\"](reject);\n      });\n    }\n  }, {\n    key: \"postForm\",\n    value: function postForm(url, data) {\n      return new Promise(function (resolve, reject) {\n        // Create virtual form\n        var form = document.createElement('FORM');\n        form.method = 'POST';\n        form.action = url; // Declare its virtual fields from sent data\n\n        for (var key in data) {\n          if (Object.prototype.hasOwnProperty.call(data, key)) {\n            var hiddenField = document.createElement('INPUT');\n            hiddenField.type = 'hidden';\n            hiddenField.name = key;\n            hiddenField.value = data[key];\n            form.appendChild(hiddenField);\n          }\n        } // Build XHR with xsrf token\n\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', url); //xhr.setRequestHeader('X-XSRF-TOKEN', this._csrfToken);\n        // Register the state change event\n\n        xhr.onreadystatechange = function (response) {\n          if (response.target.readyState === 4) {\n            // Ready state changed has reach the response state\n            // As specified with backend, response is JSON if success, HTML otherwise\n            try {\n              // If we can parse as a JSON, everything went fine server side\n              var output = JSON.parse(response.target.response);\n              resolve(output);\n            } catch (err) {\n              // Otherwise, the server returns the template with its errors\n              reject(response.target.response);\n            }\n          }\n        }; // XHR error handling\n\n\n        xhr.onerror = function () {\n          reject('F_KOM_XHR_ERROR');\n        }; // Create form data and send it through the XHR\n\n\n        var formData = new FormData(form);\n        xhr.send(formData);\n      });\n    }\n  }, {\n    key: \"xhr\",\n    value: function xhr(verb, url, data) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(verb, url, true);\n\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            resolve(JSON.parse(xhr.responseText));\n          }\n        }; // XHR error handling\n\n\n        xhr.onerror = function () {\n          reject({\n            code: 'F_KOM_XHR_ERROR'\n          });\n        };\n\n        xhr.send(data);\n      });\n    }\n  }, {\n    key: \"jwtToken\",\n    get: function get() {\n      return this._jwtToken;\n    },\n    set: function set(token) {\n      this._jwtToken = token;\n    }\n  }]);\n\n  return Kom;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Kom);\n\n//# sourceURL=webpack://BlogMaker/./front/js/utils/Kom.js?");

/***/ }),

/***/ "./front/js/utils/enum/HttpStatusCode.js":
/*!***********************************************!*\
  !*** ./front/js/utils/enum/HttpStatusCode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.freeze({\n  OK: 200,\n  NOT_FOUND: 404,\n  FORBIDDEN: 403,\n  INTERNAL_ERROR: 500\n}));\n\n//# sourceURL=webpack://BlogMaker/./front/js/utils/enum/HttpStatusCode.js?");

/***/ }),

/***/ "./front/scss/Auth.scss":
/*!******************************!*\
  !*** ./front/scss/Auth.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://BlogMaker/./front/scss/Auth.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./front/js/Auth.js");
/******/ 	window.BlogMaker = __webpack_exports__.default;
/******/ 	
/******/ })()
;